package coding.io.rentACar.business.concretes;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import coding.io.rentACar.business.abstracts.ModelService;
import coding.io.rentACar.business.requests.CreateModelRequest;
import coding.io.rentACar.business.requests.UpdateModelRequest;
import coding.io.rentACar.business.responses.GetAllModelsResponse;
import coding.io.rentACar.business.responses.GetByIdModelResponse;
import coding.io.rentACar.core.utilities.mappers.ModelMapperService;
import coding.io.rentACar.dataAccess.abstracts.ModelRepository;
import coding.io.rentACar.entities.concretes.Model;
import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class ModelManager implements ModelService{
	private ModelRepository modelRepository;
	private ModelMapperService modelMapperService;
	
	
	@Override
	public List<GetAllModelsResponse> getAll() {
		List<Model> models = modelRepository.findAll();
		
		List<GetAllModelsResponse> modelsResponse = models.stream()
				.map(model->this.modelMapperService.forResponse()
					.map(model, GetAllModelsResponse.class)).collect(Collectors.toList());
		
		
		return modelsResponse;
		

		}
	
	@Override
	public GetByIdModelResponse getById(int id) {
		Model model = this.modelRepository.findById(id).orElseThrow();
		GetByIdModelResponse response = this.modelMapperService.forResponse().map(model, GetByIdModelResponse.class);
		return response;
	}


	@Override
	public void add(CreateModelRequest createModelRequest) {
		Model model = this.modelMapperService.forRequest().map(createModelRequest, Model.class);
		this.modelRepository.save(model);			
	}


	@Override
	public void update(UpdateModelRequest updateModelRequest) {
		Model model = this.modelMapperService.forRequest().map(updateModelRequest, Model.class);
		this.modelRepository.save(model);
		
	}


	@Override
	public void delete(int id) {
		this.modelRepository.deleteById(id);
		
	}
		
		
		
	}


